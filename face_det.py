# -*- coding: utf-8 -*-
"""Face det.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CU8k7wA2CzJf2eQeiyhVQk007eGagCm-
"""

from google.colab import files
uploaded = files.upload()

import zipfile
import os

# Replace 'archive.zip' if the filename is different
with zipfile.ZipFile("archive.zip", 'r') as zip_ref:
    zip_ref.extractall("data")

# Verify directory structure
os.listdir("data")

import os

for root, dirs, files in os.walk("data"):
    print(root)

import os
import cv2
import numpy as np

data_dir = "data/data"  # or local path
categories = ['with_mask', 'without_mask']
IMG_SIZE = 100
data = []

for category in categories:
    path = os.path.join(data_dir, category)
    class_num = categories.index(category)
    for img in os.listdir(path):
        try:
            img_array = cv2.imread(os.path.join(path, img))
            resized_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))
            data.append([resized_array, class_num])
        except:
            pass

import random
random.shuffle(data)

X = []
y = []

for features, label in data:
    X.append(features)
    y.append(label)

X = np.array(X) / 255.0
y = np.array(y)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(100, 100, 3)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dense(64, activation='relu'),
    Dense(1, activation='sigmoid')  # Binary classification
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.fit(X, y, epochs=10, validation_split=0.2)
model.save("mask_detector_model.h5")